# Macro Parameters
# acc_min - The minimum acceleration value that will be tested. The default is 1000 mm/s^2.
# acc_max - The maximum acceleration value that will be tested. The default is 3000 mm/s^2.  
# acc_step - The step sized used when increasing acceleration. The default is 500 mm/s^2.
# vel_min - The minimum velocity value that will be tested. The default is 100 mm/s.
# vel_max - The maximum velocity value that will be tested. The default is 300 mm/s.   
# vel_step - The step sized used when increasing velocity. The default is 50 mm/s.  
# iterations - How many times should each acceleration and velocity combination be tested. A higher
#         value is good for ensuring you don't get a false positive. The default is 1.  
# fail_end - Should execution end as soon as an iteration fails. The default is true.  
# offset - When a test is being performed this is the distance the printhead will stay away 
#        from the machines minimum & maximum positions. The default is 10 mm.
# endstop_offset - The distance away from the end stops to check that the stops have not been 
#        triggered because of an overrun. The default is 0.044 mm

[gcode_macro MAX_OUT]
description: tests your printers maximum acceleration & velocity settings
variable_init_max_vel: 0
variable_init_max_acc: 0
variable_iterations: 0
variable_iteration: 0
variable_vel: 0
variable_vel_step: 0
variable_vel_min: 0
variable_vel_max: 0
variable_acc: 0
variable_acc_step: 0
variable_acc_min: 0
variable_acc_max: 0
variable_fail_end: True
variable_offset: 10
variable_endstop_offset: 0.045

gcode:
    # get user input values or defaults
    {% set iterations = params.ITERATIONS|default(1)|int %}
    {% set vel_step = params.VEL_STEP|default(50)|int %}
    {% set vel_min = params.VEL_MIN|default(100)|int %}
    {% set vel_max = params.VEL_MAX|default(300)|int %}
    {% set acc_step = params.ACC_STEP|default(500)|int %}
    {% set acc_min = params.ACC_MIN|default(1000)|int %}
    {% set acc_max = params.ACC_MAX|default(3000)|int %}
    {% set fail_end = params.FAIL_END|default("true")|string %}
    {% set offset = params.OFFSET|default(10)|int %}
    {% set endstop_offset = params.ENDSTOP_OFFSET|default(0.045)|float %}

    # validate user input and cast it if needed
    {% if iterations < 1 %}
        {action_raise_error("iterations must be greater than or equal to 1")}
    {% endif %}

    {% if vel_step < 1 %}
        {action_raise_error("velocity step size must be greater than or equal to 1")}
    {% endif %}

    {% if vel_min < 1 %}
        {action_raise_error("minimum velocity must be greater than or equal to 1")}
    {% endif %}

    {% if vel_max < 1 %}
        {action_raise_error("maximum velocity must be greater than or equal to 1")}
    {% endif %}

    {% if vel_max < vel_min %}
        {action_raise_error("maximum velocity must be greater than the minimum velocity")}
    {% endif %}

    {% if acc_step < 1 %}
        {action_raise_error("acceleration step size must be greater than or equal to 1")}
    {% endif %}

    {% if acc_min < 1 %}
        {action_raise_error("minimum acceleration must be greater than or equal to 1")}
    {% endif %}

    {% if acc_max < 1 %}
        {action_raise_error("maximum acceleration must be greater than or equal to 1")}
    {% endif %}

    {% if acc_max < acc_min %}
        {action_raise_error("maximum acceleration must be greater than the minimum acceleration")}
    {% endif %}

    {% if fail_end != "true" and  fail_end != "false" %}
        {action_raise_error("fail_end must be 'true' or 'false'")}
    {% endif %}
    {% if fail_end == "true" %}
        {% set fail_end = True %}
    {% else %}
        {% set fail_end = False %}
    {% endif %}

    {% if offset < 1 %}
        {action_raise_error("offset must be greater than 1")}
    {% endif %}

    {% if offset > 50 %}
        {action_raise_error("offset must be less than 50")}
    {% endif %}

    {% if endstop_offset < 0.01 %}
        {action_raise_error("offset must be greater than 0.01")}
    {% endif %}

    {% if endstop_offset > 1.0 %}
        {action_raise_error("offset must be less than 1.0")}
    {% endif %}

    # set the macro variables
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=iterations VALUE={iterations}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=iteration VALUE={0}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=vel_step VALUE={vel_step}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=vel VALUE={vel_min}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=vel_min VALUE={vel_min}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=vel_max VALUE={vel_max}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=acc_step VALUE={acc_step}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=acc VALUE={acc_min}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=acc_min VALUE={acc_min}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=acc_max VALUE={acc_max}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=fail_end VALUE={fail_end}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=offset VALUE={offset}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=endstop_offset VALUE={endstop_offset}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=init_max_vel VALUE={printer.toolhead.max_velocity}
    SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=init_max_acc VALUE={printer.toolhead.max_accel}

    # actually do something
    G28
    _MAX_OUT_WAITER_VARS method="_MAX_OUT_ITERATE"
    update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1
    


[gcode_macro _MAX_OUT_WAITER_VARS]
variable_method: "_MAX_OUT_WAITER_VARS"
variable_type: "macro"
variable_delay: 0.2
gcode:
    {% set method = params.METHOD|default("_MAX_OUT_WAITER_VARS")|string %}
    {% set type = params.TYPE|default("macro")|string %}
    {% set delay = params.DELAY|default(0.2)|float %}
    SET_GCODE_VARIABLE MACRO=_MAX_OUT_WAITER_VARS VARIABLE=method VALUE='"{method}"'
    SET_GCODE_VARIABLE MACRO=_MAX_OUT_WAITER_VARS VARIABLE=type VALUE='"{type}"'
    SET_GCODE_VARIABLE MACRO=_MAX_OUT_WAITER_VARS VARIABLE=delay VALUE={delay}



[delayed_gcode _MAX_OUT_WAITER]
gcode:
    {% set method = printer["gcode_macro _MAX_OUT_WAITER_VARS"].method|string %}
    {% set type = printer["gcode_macro _MAX_OUT_WAITER_VARS"].type|string %}
    {% set delay = printer["gcode_macro _MAX_OUT_WAITER_VARS"].delay|float %}

    {% set state = printer.idle_timeout.state %}
    {% if state == 'Printing' %}
        update_delayed_gcode ID=_MAX_OUT_WAITER Duration={delay}
    {% else %}
        {% if type == 'macro' %}
            {method}
        {% else %}
            update_delayed_gcode ID="{method}" Duration={delay}
        {% endif %}
    {% endif %}



[gcode_macro _MAX_OUT_ITERATE]
gcode:
    {% set iteration = printer["gcode_macro MAX_OUT"].iteration %}
    {% set iterations = printer["gcode_macro MAX_OUT"].iterations %}
    {% set vel = printer["gcode_macro MAX_OUT"].vel %}
    {% set vel_step = printer["gcode_macro MAX_OUT"].vel_step %}
    {% set vel_min = printer["gcode_macro MAX_OUT"].vel_min %}
    {% set vel_max = printer["gcode_macro MAX_OUT"].vel_max %}
    {% set acc = printer["gcode_macro MAX_OUT"].acc %}
    {% set acc_step = printer["gcode_macro MAX_OUT"].acc_step %}
    {% set acc_min = printer["gcode_macro MAX_OUT"].acc_min %}
    {% set acc_max = printer["gcode_macro MAX_OUT"].acc_max %}
    {% set velInit = printer["gcode_macro MAX_OUT"].init_max_vel %}
    {% set accInit = printer["gcode_macro MAX_OUT"].init_max_acc %}

    # do some actual work
    {% if iteration < iterations %}
        # iterations is less than max so don't change vel or acc
        {% set iteration = iteration + 1 %} 
        SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=iteration VALUE={iteration}
        _MAX_OUT_WAITER_VARS method="_MAX_OUT_RUN"
        update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1

    {% else %}
        # the correct number of iterations have been completed so reset iteration and increment vel
        {% set iteration = 1 %}
        SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=iteration VALUE={iteration}

        {% if vel < vel_max %}
            {% set vel = vel + vel_step %} 

            # ensure vel isn't set higher than the maximum
            {% if vel > vel_max %}
                {% set vel = vel_max %}
            {% endif %}

            SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=vel VALUE={vel}
            _MAX_OUT_WAITER_VARS method="_MAX_OUT_RUN"
            update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1

        {% else %}
            # vel has reached the maximum, so reset it and increment acc
            {% set vel = vel_min %}
            SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=vel VALUE={vel}  

            {% if acc < acc_max %}
                {% set acc = acc + acc_step %} 

                # ensure acc isn't set higher than the maximum
                {% if acc > acc_max %}
                    {% set acc = acc_max %}
                {% endif %}

                SET_GCODE_VARIABLE MACRO=MAX_OUT VARIABLE=acc VALUE={acc}
                _MAX_OUT_WAITER_VARS method="_MAX_OUT_RUN"
                update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1

            {% else %}
                _MAX_OUT_WAITER_VARS method="_MAX_OUT_FINISH"
                update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1

            {% endif %}
        {% endif %}
    {% endif %}



[gcode_macro _MAX_OUT_RUN]
gcode:
    # lookup variables
    {% set xMinLook = printer.toolhead.axis_minimum.x %}
    {% set xMaxLook = printer.toolhead.axis_maximum.x %}
    {% set xStop = printer.configfile.settings.stepper_x.position_endstop %}
    {% set xStopDir = printer.configfile.settings.stepper_x.homing_positive_dir %}

    {% set yMinLook = printer.toolhead.axis_minimum.y %}
    {% set yMaxLook = printer.toolhead.axis_maximum.y %}
    {% set yStop = printer.configfile.settings.stepper_y.position_endstop %}
    {% set yStopDir = printer.configfile.settings.stepper_y.homing_positive_dir %}

    {% set velMaxSystem = printer.toolhead.max_velocity %}
    {% set accMaxSystem = printer.toolhead.max_accel %}

    {% set iteration = printer["gcode_macro MAX_OUT"].iteration %}
    {% set vel = printer["gcode_macro MAX_OUT"].vel %}
    {% set acc = printer["gcode_macro MAX_OUT"].acc %}
    {% set velInit = printer["gcode_macro MAX_OUT"].init_max_vel %}
    {% set accInit = printer["gcode_macro MAX_OUT"].init_max_acc %}
    {% set offset = printer["gcode_macro MAX_OUT"].offset %}
    {% set endstop_offset = printer["gcode_macro MAX_OUT"].endstop_offset %}

    # calculated variables 
    {% set xMin = xMinLook + offset %}
    {% set xMax = xMaxLook - offset %}
    {% set yMin = yMinLook + offset %}
    {% set yMax = yMaxLook - offset %}

    {% if xStopDir %}
        {% set xStopNo = xStop - endstop_offset %}
    {% else %}
        {% set xStopNo = xStop + endstop_offset %}
    {% endif %}

    {% if yStopDir %}
        {% set yStopNo = yStop - endstop_offset %}
    {% else %}
        {% set yStopNo = yStop + endstop_offset %}
    {% endif %}

    {% set msg = " Starting Run : acceleration = " + acc|string +" velocity = " + vel|string + " iteration = " + iteration|string %}
    {action_respond_info(msg)}

    # the actual gcode to run 
    SET_VELOCITY_LIMIT VELOCITY={velInit} ACCEL={accInit}
    G28 X Y
    G0 X{xMin} Y{yMin}
    G4 P250
    SET_VELOCITY_LIMIT VELOCITY={vel} ACCEL={acc}

    G0 X{xMax} Y{yMin} F{vel * 60}
    G0 X{xMin} Y{yMax} F{vel * 60}
    G0 X{xMax} Y{yMax} F{vel * 60}
    G0 X{xMin} Y{yMin} F{vel * 60}

    G0 X{xMin} Y{yMax} F{vel * 60}
    G0 X{xMax} Y{yMin} F{vel * 60}
    G0 X{xMax} Y{yMax} F{vel * 60}
    G0 X{xMin} Y{yMin} F{vel * 60}

    G4 P250
    G0 X{xStopNo} Y{yStopNo} F{vel * 60}
    G4 P1000
    query_endstops

    _MAX_OUT_WAITER_VARS method="_MAX_OUT_STOP_NO_TEST"
    update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1



[gcode_macro _MAX_OUT_STOP_NO_TEST]
gcode:
    {% set x = printer.query_endstops.last_query.x %}
    {% set y = printer.query_endstops.last_query.x %}
    {% set xStop = printer.configfile.settings.stepper_x.position_endstop %}
    {% set yStop = printer.configfile.settings.stepper_y.position_endstop %}
    {% set vel = printer["gcode_macro MAX_OUT"].vel %}
    {% set fail_end = printer["gcode_macro MAX_OUT"].fail_end %}


    {% if x == 1 or y == 1 %}
        {action_respond_info("Failed : An endstop was triggered when it shouldn't be.")}

        {% if fail_end %}
            _MAX_OUT_WAITER_VARS method="_MAX_OUT_FINISH"
            update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1
        {% else %}
            _MAX_OUT_WAITER_VARS method="_MAX_OUT_ITERATE"
            update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1
        {% endif %}
    {% else %}
        G0 X{xStop} Y{yStop} F{vel * 60}
        G4 P1000
        query_endstops

        _MAX_OUT_WAITER_VARS method="_MAX_OUT_STOP_TEST"
        update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1
    {% endif %}



[gcode_macro _MAX_OUT_STOP_TEST]
gcode:
    {% set x = printer.query_endstops.last_query.x %}
    {% set y = printer.query_endstops.last_query.x %}
    {% set fail_end = printer["gcode_macro MAX_OUT"].fail_end %}

    {% if x == 0 or y == 0 %}
        {action_respond_info("Failed : An endstop wasn't triggered when it should be.")}

        {% if fail_end %}
            _MAX_OUT_WAITER_VARS method="_MAX_OUT_FINISH"
            update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1
        {% else %}
            _MAX_OUT_WAITER_VARS method="_MAX_OUT_ITERATE"
            update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1
        {% endif %}
    {% else %}
        {action_respond_info("Passed")}

        _MAX_OUT_WAITER_VARS method="_MAX_OUT_ITERATE" type="macro"
        update_delayed_gcode ID=_MAX_OUT_WAITER Duration=0.1
    {% endif %}


[gcode_macro _MAX_OUT_FINISH]
gcode:
    {% set velInit = printer["gcode_macro MAX_OUT"].init_max_vel %}
    {% set accInit = printer["gcode_macro MAX_OUT"].init_max_acc %}

    SET_VELOCITY_LIMIT VELOCITY={velInit} ACCEL={accInit}
    {action_respond_info("MAX_OUT finished")}
